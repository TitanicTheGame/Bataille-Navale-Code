from tkinter import*
from PIL import Image, ImageTk

X=Y=300

SensBateaux={'B1':'vertical','B2':'vertical','B3':'vertical'}  #Dictionnaire contenant l'information du sens des bateaux

#FONCTIONS

def plateau(Canvas):
    global X,Y
    x=y=0
    for i in range(4):
        x+=X/5
        y+=Y/5
        Canvas.create_line(x,0,x,Y,fill='black')
        Canvas.create_line(0,y,X,y,fill='black')

def poserBombe(evt):
    x=(evt.x//(X/5)+1)*X/5
    y=(evt.y//(Y/5)+1)*Y/5
    Bombes.create_line(x-X/5,y-Y/5,x,y,fill='black')
    Bombes.create_line(x-X/5,y,x,y-Y/5,fill='black')

def poserbateau(evt):
    (x1,y1)=Bateaux.coords(B1)
    (x2,y2)=Bateaux.coords(B2)
    (x3,y3)=Bateaux.coords(B3)
    if evt.x>x1-X/10 and evt.x<x1+X/10 and evt.y>y1-Y/5 and evt.y<y1+Y/5:
        Bateaux.coords(B1,(evt.x,evt.y))
    elif evt.x>x2-X/10 and evt.x<x2+X/10 and evt.y>y2-Y/5 and evt.y<y2+Y/5:
        Bateaux.coords(B2,(evt.x,evt.y))
    elif evt.x>x3-X/10 and evt.x<x3+X/10 and evt.y>y3-Y/5 and evt.y<y3+Y/5:
        Bateaux.coords(B3,(evt.x,evt.y))

def corrigerpositions(evt): #Replace le bateau sur les cases
    (x1,y1)=Bateaux.coords(B1)
    (x2,y2)=Bateaux.coords(B2)
    (x3,y3)=Bateaux.coords(B3)
    if SensBateaux['B1']=='vertical':
        (X1,Y1)=(round(x1//(X/5))*X/5+X/10,round(y1//(Y/5))*(Y/5))
    elif SensBateaux['B1']=='horizontal':
        (X1,Y1)=(round(x1//(X/5))*X/5,round(y1//(Y/5))*Y/5+Y/10)
    if SensBateaux['B2']=='vertical':
        (X2,Y2)=(round(x2//(X/5))*X/5+X/10,round(y2//(Y/5))*(Y/5))
    elif SensBateaux['B2']=='horizontal':
        (X2,Y2)=(round(x2//(X/5))*X/5,round(y2//(Y/5))*Y/5+Y/10)
    if SensBateaux['B3']=='vertical':
        (X3,Y3)=(round(x3//(X/5))*X/5+X/10,round(y3//(Y/5))*Y/5)
    elif SensBateaux['B3']=='horizontal':
        (X3,Y3)=(round(x3//(X/5))*X/5,round(y3//(Y/5))*Y/5+Y/10)
    (X1,Y1)=validerpositions2(X1,Y1,'B1')
    (X2,Y2)=validerpositions2(X2,Y2,'B2')
    (X3,Y3)=validerpositions2(X3,Y3,'B3')
    Bateaux.coords(B1,(X1,Y1))
    Bateaux.coords(B2,(X2,Y2))
    Bateaux.coords(B3,(X3,Y3))
   
   
def corrigerpositions2(x,y,B): #Regarde si le bateau ne dépasse pas du cadre
    if SensBateaux[B]=='vertical':
        if x<=0:
            x=X/10
        if x>=X:
            x=X-X/10
        if y<=0:
            y=Y/5
        if y>=Y:
            y=Y-Y/5
    else:
        if x<=0:
            x=X/5
        if x>=X:
            x=X-X/5
        if y<=0:
            y=Y/10
        if y>=Y:
            y=Y-Y/10
    return(x,y)

def tournerbateau(evt): #Tourne le bateau de 90° #Penser à différencier cas horizontal et vertical
    (x1,y1)=Bateaux.coords(B1)
    (x2,y2)=Bateaux.coords(B2)
    (x3,y3)=Bateaux.coords(B3)
    if evt.x>x1-X/10 and evt.x<x1+X/10 and evt.y>y1-Y/5 and evt.y<y1+Y/5:
        B='B1'
        (x,y)=(x1,y1)
    if evt.x>x2-X/10 and evt.x<x2+X/10 and evt.y>y2-Y/5 and evt.y<y2+Y/5:
        B='B2'
        (x,y)=(x2,y2)
    if evt.x>x3-X/10 and evt.x<x3+X/10 and evt.y>y3-Y/5 and evt.y<y3+Y/5:
        B='B3'
        (x,y)=(x3,y3)
    tournerbateau2(x,y,B)

def tournerbateau2(x,y,B):
    global B1,B2,B3
    if SensBateaux[B]=='vertical':
        if B=='B1':
            Bateaux.delete(B1)
            B1=Bateaux.create_image(x+X/10,y+Y/10,image=bateauh)
        if B=='B2':
            Bateaux.delete(B2)
            B2=Bateaux.create_image(x+X/10,y+Y/10,image=bateauh)
        if B=='B3':
            Bateaux.delete(B3)
            B3=Bateaux.create_image(x+X/10,y+Y/10,image=bateauh)
        SensBateaux[B]='horizontal'
    elif SensBateaux[B]=='horizontal':
        if B=='B1':
            Bateaux.delete(B1)
            B1=Bateaux.create_image(x+X/10,y+Y/10,image=bateauv)
        if B=='B2':
            Bateaux.delete(B2)
            B2=Bateaux.create_image(x+X/10,y+Y/10,image=bateauv)
        if B=='B3':
            Bateaux.delete(B3)
            B3=Bateaux.create_image(x+X/10,y+Y/10,image=bateauv)
        SensBateaux[B]='vertical'
    
def tournerimage(img): #Tourne une image à 90°
    (X,Y)=img.size
    if X>Y:
        (X1,Y1)=(X,X)
    else:
        (X1,Y1)=(Y,Y)
    img=img.resize((X1,Y1))
    img=img.rotate(90)
    img=img.resize((Y,X))
    return(img)

def valider():
    L=[]
    L.append(Bateaux.coords(B1))
    L.append(Bateaux.coords(B2))
    L.append(Bateaux.coords(B3))
    Bateaux.unbind("<B1-Motion>")
    Bombes.bind("<Button-1>",poserBombe)
    Valider.destroy()
   

#CARTE BATEAU

Plateau=Tk()
Plateau.title('Titanic the game')
Bateaux=Canvas(Plateau,width=X, height = Y,bg='white')
Bateaux.pack(side=LEFT)

Bateaux.bind("<B1-Motion>",poserbateau)
Bateaux.bind("<ButtonRelease-1>",corrigerpositions)
Bateaux.bind('<Double-Button-1>',tournerbateau)

img=Image.open('bateau.png') #L'image de départ doit être verticale
img=img.resize((X//5,2*Y//5))
img2=tournerimage(img)
bateauv=ImageTk.PhotoImage(img)
bateauh=ImageTk.PhotoImage(img2)
fond=PhotoImage(file='fondmer.png')
Bateaux.create_image(X/2,Y/2,image=fond)
B1=Bateaux.create_image(X/10,Y/5,image=bateauv)
B2=Bateaux.create_image(3*X/10,Y/5,image=bateauv)
B3=Bateaux.create_image(5*X/10,Y/5,image=bateauv)

plateau(Bateaux)


#CARTE BOMBE

Bombes=Canvas(Plateau,width=X, height = Y,bg='white')
Bombes.pack(side=RIGHT)

plateau(Bombes)
    
Plateau.mainloop()
